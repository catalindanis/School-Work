#include <iostream>
using namespace std;

int st[100], n, nrsol;

int nr_nat(int n)
{
    if(n<0)
        n=-n;
    return n;
}
int valid(int k)
{
    for (int i=1; i<=k-1; i++)
        if ( (st[i]==st[k]) || (nr_nat( (st[k]-st[i]) ) == (k-i) ) )
            return 0;
    return 1;
}

int solutie( int k)
{
    if (k==n)
        return 1;
    return 0;
}
void tiparire()
{
    nrsol++;
    cout<<endl<<" Solutia "<<nrsol<<" este: "<<endl;
    for(int i=1; i<=n; i++)
    {
        cout<<endl;
        for(int j=1; j<=n; j++)
            if (st[j]==i)
                cout<<" D ";
            else
                cout<<" - ";
    }
    cout<<endl;
}
void backtracking(int k)
{
    st[k]=0;
    for (int i=1; i<=n; i++)
    {
        st[k]=i;
        if (valid(k)==1)
        {
            if (solutie(k)==1)
                tiparire();
            else
                backtracking(k+1);
        }
    }
}
int main()
{
    cout<<" Dimensiunea tablei: ";
    cin>>n;
    if(n<=3)
    {
        cout<<" nu exista solutii "<<endl;
    }
    else if(n>=8)
    {
        cout<<" nr prea mare "<<endl;
    }
    else
    {
    backtracking(1);
    cout<<endl<<" Sunt "<<nrsol<<" solutii ";
    }
    return 0;
}